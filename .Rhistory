y <- i %/% 16
points(x, y, pch=-i)
}
par(pty="m")
## PR 816 (label sizes in dotchart)
### Prior to 1.2.2, the label sizes were unaffected by cex.
dotchart(VADeaths, main = "Death Rates in Virginia - 1940", cex = 0.5)
dotchart(VADeaths, main = "Death Rates in Virginia - 1940", cex = 1.5)
## killed by 0 prior to 1.4.0 and in 1.4.1:
t1 <- ts(0:100)
## only warnings about values <= 0
plot(t1, log = "y")
plot(cbind(t1, 10*t1, t1 - 4), log="y", plot.type = "single")
stopifnot(par("usr")[4] > 3) # log10: ylim[2] = 1000
## This one needs to be looked at.
## lty = "blank" killed the fill colour too.
plot(1:10, type="n")
polygon(c(1, 3, 3, 1), c(1, 1, 3, 3), col="yellow", border="red", lty="blank")
rect(6, 6, 10, 10,  col="blue", border="red", lty="blank")
## in 1.5.0 all omit the fill colours.
with(trees, symbols(Height, Volume, circles=Girth/24, inches=FALSE,
lty="blank", bg="blue"))
#### Regression tests for GRAPHICS & PLOTS
pdf("reg-plot.pdf", paper="a4r", encoding ="ISOLatin1.enc", compress = FALSE)
## since we supply the font metrics, the results depend only on
## the encoding used: Windows is different from Unix by default.
options(warn = 1) # print as they occur
plot(0) # this should remain constant
str(par(c("usr","xaxp","yaxp")))
### Test for centring of chars.  All the chars which are plotted should
### be centred, and there should be no warnings about
### font metrics unknown for character `?'
par(pty="s")
plot(c(-1,16), c(-1,16), type="n", xlab="", ylab="", xaxs="i", yaxs="i")
title("Centred chars in default char set (ISO Latin1)")
q()
q()
x <- c(1,2,3)
exit()
quit()
find.package("devtools")
install.packages("devtools")
install.packages("devtools")
exit()
library(devtools)
library(devtools)
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
q()
find_rtools()
library(devtools)
find_rtools()
q()
install.packages("KernSmooth")
library(KernSmooth)
getwd()
setwd("C:/My Docs/Тренинги и семинары/!Coursera/2. R Programming/week 2/programming 1")
getwd()
ls()
directory <- "specdata"
id <- 1
fname <- id
length(fname)
fname <- paste("0",id)
fname <- paste("0",id, sep="")
length(fname)
lengths(fname)
nchar(fname)
fname <- id
while (nchar(fname)<3) { fname <- paste("0",fname,sep="") }
fpath <- paste("./", directory, "/", fname, ".csv", sep = "")
data <- read.csv(fpath)
data
head(data)
tail(data)
pollutant <- "sulfate"
is.na(data$sulfate)
is.na(data[[pollutant]])
bad <- is.na(data[[pollutant]])
data[[pollutant]](!bad)
data[[pollutant]][!bad]
gooddata <- data[[pollutant]][!bad]
mean <- mean(gooddata)
id <- 1:332
for (i in id) { }
i
for (i in id) { print(i) }
cnt <- 0
for (i in id) { cnt <- cnt + 1
print(cnt)
}
id <- 34:39
for (i in id) { cnt <- cnt + 1
print(cnt)
}
id
cnt <- 0
for (i in id) { cnt <- cnt + 1
print(cnt)
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
gooddata
mean(gooddata)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfat", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
mean(gooddata)
sum(gooddata)
length(gooddata)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 23)
print(pollutantmean("specdata", "nitrate", 23))
getwd()
source(pollutantmean.R)
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
p <- pollutantmean("specdata", "sulfate", 1:10)
p <- pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate")
source("submitscript1.R")
submit()
submit()
submit()
submit()
exit
rez <- data.frame(row.names = c("id", nobs"))
rez <- data.frame(row.names = c("id", "nobs"))
rez <- data.frame(row.names = c("id", "nobs"))
rez
rez$id <- 1
rez$nobs <- 50
rez
rez <- data.frame(row.names = c("id", "nobs"))
rez <- data.frame("id", "nobs")
rez
rez <- data.frame(id, nobs)
rez <- data.frame(id = c(), nobs = c())
rez
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x[1]
x[2]
x[1,1]
x[1,2]
rez[1,1] <- 1
rez[1,2] <- 50
rez
rez <- data.frame(id = c(), nobs = c())
rez
rez <- data.frame(id = c(1), nobs = c(50))
rez
rez[2,1] <- 1
rez[2,2] <- 50
rez
id = c()
is
id
id[1] <- 1
clear()
cls()
id <- c()
nobs <- c()
id[1] <- 1
nobs[1] <- 50
id[2] <- 2
nobs[2] <- 100
rez <- data.frame(id = id, nobs = nobs)
rez
i <- 3
id[i] <- i
nobs[i] <- 150
rez <- data.frame(id = id, nobs = nobs)
rez
data <- read.csv("./specdata/001.csv")
good <- complete.cases(data)
gooddata <- data[good, ])
gooddata <- data[good, ]
gooddata
length(gooddata)
length(gooddata[1])
good
unclass(good)
good(TRUE)
good[good]
legth(good[good])
size(good[good])
good.length
good$length
attributes(good)
seq_along(good)
seq(good)
length(good)
length(good[good])
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
z <- complete("specdata", c(2, 4, 8, 10, 12))
z
z <- z + complete("specdata", c(2, 4, 8, 10, 12))
z
nrow(z)
length(z)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("submitscript1.R")
submit()
submit()
submit()
cdr <- c(-0.01896, -0.14051, -0.04390, -0.06816, -0.12351, -0.07589)
head(cr)
cdr <- c(-0.01896, -0.14051, -0.04390, -0.06816, -0.12351, -0.07589)
cr <- c(-0.01896, -0.14051, -0.04390, -0.06816, -0.12351, -0.07589)
head(cr)
summary(cr)
exit
exit()
quit()
data <- data.frame(x = c(1,2,3), y = c(1,2,3))
data
cor(data$x, data$y)
data <- data.frame(x = c(1,2,3), y = c(4,5,6))
cor(data$x, data$y)
data <- data.frame(x = c(1,2,3), y = c(6,5,4))
cor(data$x, data$y)
data <- data.frame(x = c(1,2,3), y = c(5,5,5))
cor(data$x, data$y)
data
data <- data.frame(x = c(1,2,3), y = c(5,5,6))
cor(data$x, data$y)
data <- data.frame(x = c(1,1,1), y = c(5,5,6))
cor(data$x, data$y)
data <- data.frame(x = c(1,1,1), y = c(5,5,5))
cor(data$x, data$y)
cr <- c()
cr
source("corr.R")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
cr
data <- read.csv("./specdata/001.csv")
good <- complete.cases(data)
gooddata <- data[good]
data[good]
data[good,]
gooddata <- data[good, ]
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
warnings()
head(cr)
complete("specdata", 1)
complete("specdata", 1)[2]
complete("specdata", 1)[1,2]
comp <- complete(directory, 1:332)
comp <- complete("specdata", 1:332)
comp
comp[comp$nobs < 50]
comp[comp$nobs < 50,]
goodcomp <- comp[comp$nobs > 50,]
goodcomp
goodcomp$id
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
ск
cr
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
summary(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
x <- as.numeric(c())
summary(x)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
round(cr,5)
cr <- round(cr,5)
length(cr)
summary(cr)
source("submitscript1.R")
submit()
source("corr.R")
source("complete.R")
submit()
submit()
submit()
x <- 1:10
if (x > 5) { x <- 0 }
x <- c(3,5,1,10,12,6)
x[x<6] == 0
x
x[x<=5] <- 0
x
x <- c(1,9,2,8,3,7,4,6,5)
x[x<=5] <- 0
x
a <- 10
foo <- function () {}
foo <- function () {
a <- 5
goo <- function () {
print(a)
}
goo()
}
foo
foo
foo()
goo()
a
getws()
getwd()
x <- read.csv("mammals.csv")
x
x$body/x$brain
x$brain/x$body
(x$brain*1e3)/x$body
(x$brain/1e3)/x$body
max((x$brain/1e3)/x$body)
min((x$brain/1e3)/x$body)
y <- (x$brain/1e3)/x$body
max(y)
x[(x$brain/1e3)/x$body == max(y).]
x[(x$brain/1e3)/x$body == max(y),]
x[(x$brain/1e3)/x$body == min(y),]
x[(x$brain/1e3)/x$body == min(y),][1]
x[(x$brain/1e3)/x$body == max(y),][1]
x[(x$brain/1e3)/x$body == max(y),][1,1]
x[(x$brain/1e3)/x$body == max(y),][1,1]
x[(x$brain/1e3)/x$body == max(y),][1]
x[(x$brain/1e3)/x$body == max(y),][1][1]
x[(x$brain/1e3)/x$body == max(y),][1,]
x[(x$brain/1e3)/x$body == min(y),][1,]
x
x[(x$barin == min(x$brain),][1,]
x[x$barin == min(x$brain),][1,]
x
x[x$barin == min(x$brain),]
x[x$barin == min(x$brain)]
x[x$barin == min(x$brain),]
x[x$brain == min(x$brain),]
x[x$brain == max(x$brain),]
x[x$body == max(x$body),]
x[x$body == min(x$body),]
dim(mammals)
dim(x)
summary(mammals)
summary(x)
attach(x)
plot(body, brain, main="Body Weight vs Brain Weight", xlab="Body Weight (kg)", ylab="Brain Weight (g)")
identify(body, brain, rownames(x))
mammals[c(1,5,25), ]
ч[c(1,5,25), ]
x[c(1,5,25), ]
library(datasets)
data(iris)
?iris
iris
iris[Species = virginica]
iris[iris$Species = virginica]
iris[iris$Species == virginica]
iris[iris$Species = 'virginica']
iris[iris$Species == 'virginica']
iris$Species
iris$Species == 'virginica'
iris$Sepal.Length[iris$Species == 'virginica']
mean(iris$Sepal.Length[iris$Species == 'virginica'])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
x=apply(iris[, 1:4], 2, mean)
x <- apply(iris[, 1:4], 2, mean)
colMeans(iris)
library(datasets)
data(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
x <- apply(iris[, 1:4], 2, mean)
y <- c(1,2,3,4)
apply(iris, 1, mean)
apply(iris, 2, mean)
colMeans(iris)
iris[, 1:4]
iris
apply(iris[, 1:5], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)[1]
apply(iris[, 1:4], 2, mean)[3]
library(datasets)
data(mtcars)
?mtcars
mcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
f <- c(4,6,8)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars$hp[mtcars$cyl == 4]
mtcars$hp[mtcars$cyl == 8]
mean(mtcars$hp[mtcars$cyl == 4])
mean(mtcars$hp[mtcars$cyl == 8])
mean(mtcars$hp[mtcars$cyl == 8]) - mean(mtcars$hp[mtcars$cyl == 4])
debug(ls)
ls()
q
ln()
ls()
exit()
quit()
undebug()
quit()
y <- 1:1e4
x1 <- 1:1e4
x2 <- 1:1e4
fit <- lm(y ~ x1 + x2)
y <- 1:1e5
x2 <- 1:1e5
x2 <- 1:1e5
fit <- lm(y ~ x1 + x2)
x1 <- 1:1e5
fit <- lm(y ~ x1 + x2)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
getwd()
setwd("C:/Users/dvbelyaev/Desktop/Coursera/ProgrammingAssignment2")
source("cachematrix.R")
m <- makeCacheMatrix(matrix(c(1,2,3,4,5,6,7,8,0),3,3))
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(1,2,3,4,5,6),2,2))
cacheSolve(m)
cacheSolve(m)
m %*% cacheSolve(m)
m$get() %*% m$getinv()
m <- makeCacheMatrix(matrix(c(1,2,3,4,5,6,7,8,0),3,3))
m$get() %*% m$getinv()
cacheSolve(m)
m$get() %*% m$getinv()
m$getinv() %*% m$get()
round(m$getinv() %*% m$get())
round(m$get() %*% m$get())
round(m$get() %*% m$getinv())
quit()
